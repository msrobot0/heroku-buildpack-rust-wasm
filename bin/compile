#!/bin/bash

# Find all the directories we might need (based on
# heroku-buildpack-nodejs code).
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

# Export DATABASE_URL at build time, mostly because Diesel is the best way to
# do SQL in Rust right now, and Diesel will use it to generated code for the
# database schema.
if [ -e "$ENV_DIR/DATABASE_URL" ]; then
  export DATABASE_URL="$(cat $ENV_DIR/DATABASE_URL)";
fi

# Gotta use nightly for wasm right now
VERSION=nightly

# Standard paranoia.
set -eu

# Record our Rust build environment configuration in an export file, in
# case another buildpack needs it to build Ruby gems that use Rust or
# something like that.
cat <<EOF > $BP_DIR/export
# Our rustup installation.
export RUSTUP_HOME="$CACHE_DIR/multirust"

# Our cargo installation.  We implicitly trust Rustup and Cargo
# to do the right thing when new versions are released.
export CARGO_HOME="$CACHE_DIR/cargo"

# Include binaries installed by cargo and rustup in our path.
PATH="\$CARGO_HOME/bin:\$PATH"
EOF

# Read our build environment back in and evaluate it so that we can use it.
. $BP_DIR/export

# Switch to our cache directory.
mkdir -p "$CACHE_DIR"
cd "$CACHE_DIR"

# Make sure we have an appropriate Rust toolchain installed.
if [ -d "$CARGO_HOME" ]; then
    echo "-----> Checking for new releases of Rust $VERSION channel"
    # It's possible that $VERSION has changed, or the `stable` channel has updated.
    rustup self update
    rustup update "$VERSION"
    rustup default "$VERSION"
else
    echo "-----> Downloading rustup"
    curl https://sh.rustup.rs -sSf > rustup.sh
    chmod u+x rustup.sh

    echo "-----> Using rustup to install Rust channel $VERSION"
    ./rustup.sh -y --default-toolchain "$VERSION"

    echo "-----> Installing wasm target"
    rustup target add wasm32-unknown-unknown

    echo "-----> Installing wasm-gc"
    cargo install --git https://github.com/alexcrichton/wasm-gc

    rm rustup.sh
fi
if [ ! -x "$CARGO_HOME/bin/rustc" ]; then
  echo "failed: Cannot find Rust binaries at $CARGO_HOME"
  exit 1
fi

# This is where we will cache our Rust output.  Note the suggestions at
# https://github.com/alexcrichton/cargo/commit/014765f788ca1c2476936835ca32cc2746f99b42
# which describe how this needs to be named.

export CARGO_TARGET_DIR="$CACHE_DIR/target"

# Build our project (into CARGO_TARGET_DIR so we have caching) and copy it
# back to the source tree.  In theory, we could probably just copy the
# binary or do something clever with `cargo install`, but we haven't
# figured that out yet.
#
# To debug git issues:
#export RUST_LOG="cargo::sources::git=debug"
# To debug compiler and linking issues, add `--verbose`.
echo "-----> Building application using Cargo"
cd $BUILD_DIR
rm -rf target/

# app specific build here
#cargo build #--manifest-path=rorschachCargo.toml --release --target=wasm32-unknown-unknown

#wasm-gc "$CARGO_TARGET_DIR/wasm32-unknown-unknown/release/semver_wasm.wasm" "$CARGO_TARGET_DIR/wasm32-unknown-unknown/release/semver_wasm.wasm"

cargo build --release
wasm-pack build
echo $CARGO_TARGET_DIR
#mv "$CARGO_TARGET_DIR/wasm32-unknown-unknown/release/semver_wasm.wasm" public/semver.wasm

#mkdir -p target/release

#find "$CARGO_TARGET_DIR/release" -maxdepth 1 -type f -executable -exec cp -a -t target/release {} \;
